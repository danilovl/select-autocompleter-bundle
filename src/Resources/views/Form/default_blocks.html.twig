{% block cdn %}
    {% if autocompleter.cdn.link is not empty or autocompleter.cdn.script is not empty or autocompleter.cdn.language is not empty %}
        <script>
            (function () {
                let cdnId = 'autocompleter-cdn-link';
                let scriptId = 'autocompleter-cdn-script';
                let languageId = 'autocompleter-cdn-language';

                function addTag(type, id, path) {
                    let head = document.getElementsByTagName('head')[0];
                    let script = document.createElement(type);

                    if (type === 'link') {
                        script.rel = 'stylesheet';
                        script.href = path;
                    }

                    if (type === 'script') {
                        script.src = path;
                    }

                    script.crossorigin = 'anonymous';
                    script.id = id;
                    script.async = false;
                    head.appendChild(script);
                }

                {% if autocompleter.cdn.link is not empty %}
                    if (!document.getElementById(cdnId)) {
                        addTag('link', cdnId, "{{ asset(autocompleter.cdn.link) }}");
                    }
                {% endif %}

                {% if autocompleter.cdn.script is not empty %}
                    if (!document.getElementById(scriptId)) {
                        addTag('script', scriptId, "{{ asset(autocompleter.cdn.script) }}");
                    }
                {% endif %}

                {% if autocompleter.cdn.language is not empty %}
                    {% set language = autocompleter.select_option.language == 'auto' ? app.request.locale : autocompleter.select_option.language %}

                    if (!document.getElementById(languageId)) {
                        addTag('script', languageId, "{{ asset(autocompleter.cdn.language | replace({'%language%': language})) }}");
                    }
                {% endif %}
            })();
        </script>
    {% endif %}
{% endblock %}

{% block style %}
    {% if select_autocompleter_is_render_block_style() == false %}
        <style>
            .select2-search--inline {
                display: contents;
            }

            .select2-search__field:placeholder-shown {
                width: 100% !important;
            }
        </style>
    {% endif %}
{% endblock %}

{% block select_tag %}
    <select {{ block('widget_attributes') }}
            {% if autocompleter.select_option.multiple %} multiple="multiple"{% endif %}
    >
        {% for item in autocompleter.values %}
            {% set dataImage = null %}
            {% if item.image is defined and item.image is not null %}
                {% set dataImage = item.image %}
            {% endif %}

            <option selected="selected"
                    value="{{ item.id }}"
                    {% if dataImage is not null %}data-image="{{ dataImage }}"{% endif %}
            >
                {{ item.text }}
            </option>
        {% endfor %}
    </select>
{% endblock %}

{% block script %}
     <script type="text/javascript">
         (function ($) {
             {% block input %}
                let selectElement = $('#{{ id }}');
             {% endblock %}

             {% block options %}
                {% set language = autocompleter.select_option.language == 'auto' ? app.request.locale : autocompleter.select_option.language %}

                let options = {
                    dir: '{{ autocompleter.select_option.dir }}',
                    minimumInputLength: {{ autocompleter.select_option.minimum_input_length }},
                    maximumInputLength: {{ autocompleter.select_option.maximum_input_length }},
                    minimumResultsForSearch:{{ autocompleter.select_option.minimum_results_for_search }},
                    maximumSelectionLength: {{ autocompleter.select_option.maximum_selection_length }},
                    minimumSelectionLength: {{ autocompleter.select_option.minimum_selection_length }},
                    width: '{{ autocompleter.select_option.width }}',
                    scrollAfterSelect: {{ autocompleter.select_option.scroll_after_select ? 'true' : 'false' }},
                    language: '{{ language }}',
                    disabled: selectElement.prop('desable'),
                    allowClear: !selectElement.prop('required'),
                    placeholder: '{{ autocompleter.select_option.placeholder | trans }}',
                    multiple: {{ autocompleter.select_option.multiple ? 'true' : 'false' }},
                    closeOnSelect: {{ autocompleter.select_option.multiple ? 'false' : 'true' }},
                    selectOnClose: {{ autocompleter.select_option.select_on_close ? 'true' : 'false' }},
                    theme: '{{ autocompleter.select_option.theme }}',
                    amdBase: '{{ autocompleter.select_option.amd_base }}',
                    amdLanguageBase: '{{ autocompleter.select_option.amd_language_base }}',
                };
             {% endblock %}

             {% block options_data %}
                options.data = {{ autocompleter.values | json_encode | raw }};
             {% endblock %}

             {% block options_ajax %}
                {% set routeParameters = autocompleter.route.parameters | merge({name: autocompleter.name}) %}

                options.ajax = {
                    url: '{{ path(autocompleter.route.name, routeParameters) }}',
                    dataType: 'json',
                    delay: {{ autocompleter.select_option.delay }},
                    cache: {{ autocompleter.select_option.cache ? 'true' : 'false' }}
                };
             {% endblock %}

             {% block options_ajax_data %}
                let dependentName = undefined;
                let dependentId = undefined;

                {% if autocompleter.dependent_select.name is defined %}
                    dependentName = '{{ autocompleter.dependent_select.name }}';
                {% endif %}

                {% if autocompleter.dependent_select.parent_field is defined %}
                    let selectId = '{{ form.parent.offsetGet(autocompleter.dependent_select.parent_field).vars.id }}';

                    jQuery(`select#${selectId}`).change( function() {
                        dependentId = jQuery(this).val();
                    });
                {% endif %}

                options.ajax.data = function (params) {
                    return {
                        search: params.term,
                        page: params.page,
                        dependentName: dependentName,
                        dependentId: dependentId,
                        extra: {{ autocompleter.route.extra | default({}) | json_encode | raw }}
                    }
                };
             {% endblock %}

             {% block options_image %}
                {% if autocompleter.image is not empty %}
                    options.templateResult = function (item) {
                        if (item.image && item.image.length !== 0) {
                            let width = '{{ autocompleter.image_result_width }}';

                            return $(`<span><img width="${width}" src="${item.image}"/>${item.text}</span>`);
                        } else {
                            return $(`<span>${item.text}</span>`);
                        }
                    };
                    options.templateSelection = function (item) {
                        if (!item.id) {
                            return item.text;
                        }

                        let image = null;
                        if (item.element !== undefined) {
                            let dataImage = $(item.element).attr('data-image');
                            if (dataImage !== undefined) {
                                image = dataImage;
                            }
                        }

                        if (item.image && item.image.length !== 0) {
                            image = item.image;
                        }

                        if (image !== null && image.length !== 0) {
                            let width = '{{ autocompleter.image_selection_width }}';

                            return $(`<span><img width="${width}" src="${image}"/>${item.text}</span>`);
                        } else {
                            return $(`<span>${item.text}</span>`);
                        }
                    }
                {% endif %}
             {% endblock %}

             {% block initialize %}
                 if (window.selectAutocompleterEventLoad !== undefined && window.selectAutocompleterEventLoad === true) {
                     selectElement.select2(options);
                 } else {
                     window.addEventListener('load', () => {
                         window.selectAutocompleterEventLoad = true
                         selectElement.select2(options);
                     });
                 }
             {% endblock %}

             {% block select_event_selecting %}
                {% if autocompleter.select_option.multiple == false %}
                     selectElement.on('select2:selecting', () => {
                         selectElement.empty();
                     });
                {% endif %}
             {% endblock %}

             {% block select_event_unselecting %}
                 selectElement.on('select2:unselecting', event => {
                     let select2Id = event.params.args.data.id;
                     selectElement.find(`option[value='${select2Id}']`).remove();
                 });
             {% endblock %}
         }(jQuery));
     </script>
{% endblock %}
